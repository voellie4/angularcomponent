{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { NgZone, InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, throwError, BehaviorSubject, fromEvent, ReplaySubject } from 'rxjs';\nimport { filter, switchMap, mapTo, tap, catchError, map, take, shareReplay, takeUntil, switchAll, startWith, share } from 'rxjs/operators';\nimport { forceFrameRate, scheduleCallback, cancelCallback } from '@rx-angular/cdk/internals/scheduler';\nimport { coalescingManager, coalesceWith } from '@rx-angular/cdk/coalescing';\nimport { getZoneUnPatchedApi } from '@rx-angular/cdk/internals/core';\nimport { coerceAllFactory } from '@rx-angular/cdk/coercing';\n\n// set default to 60fps\nforceFrameRate(60);\nconst immediateStrategy = {\n  name: 'immediate',\n  work: cdRef => cdRef.detectChanges(),\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => {\n    return o$ => o$.pipe(scheduleOnQueue(work, {\n      ngZone,\n      priority: 1 /* ImmediatePriority */,\n      scope\n    }));\n  }\n};\nconst userBlockingStrategy = {\n  name: 'userBlocking',\n  work: cdRef => cdRef.detectChanges(),\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => {\n    return o$ => o$.pipe(scheduleOnQueue(work, {\n      ngZone,\n      priority: 2 /* UserBlockingPriority */,\n      scope\n    }));\n  }\n};\nconst normalStrategy = {\n  name: 'normal',\n  work: cdRef => cdRef.detectChanges(),\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => {\n    return o$ => o$.pipe(scheduleOnQueue(work, {\n      ngZone,\n      priority: 3 /* NormalPriority */,\n      scope\n    }));\n  }\n};\nconst lowStrategy = {\n  name: 'low',\n  work: cdRef => cdRef.detectChanges(),\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => {\n    return o$ => o$.pipe(scheduleOnQueue(work, {\n      ngZone,\n      priority: 4 /* LowPriority */,\n      scope\n    }));\n  }\n};\nconst idleStrategy = {\n  name: 'idle',\n  work: cdRef => cdRef.detectChanges(),\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => {\n    return o$ => o$.pipe(scheduleOnQueue(work, {\n      ngZone,\n      priority: 5 /* IdlePriority */,\n      scope\n    }));\n  }\n};\nfunction scheduleOnQueue(work, options) {\n  const scope = options.scope || {};\n  return o$ => o$.pipe(filter(() => !coalescingManager.isCoalescing(scope)), switchMap(v => new Observable(subscriber => {\n    coalescingManager.add(scope);\n    const task = scheduleCallback(options.priority, () => {\n      work();\n      coalescingManager.remove(scope);\n      subscriber.next(v);\n    }, {\n      delay: options.delay,\n      ngZone: options.ngZone\n    });\n    return () => {\n      coalescingManager.remove(scope);\n      cancelCallback(task);\n    };\n  }).pipe(mapTo(v))));\n}\nconst RX_CONCURRENT_STRATEGIES = {\n  immediate: immediateStrategy,\n  userBlocking: userBlockingStrategy,\n  normal: normalStrategy,\n  low: lowStrategy,\n  idle: idleStrategy\n};\nconst animationFrameTick = () => new Observable(subscriber => {\n  // use the unpatched API no avoid zone interference\n  const id = getZoneUnPatchedApi('requestAnimationFrame')(() => {\n    subscriber.next(0);\n    subscriber.complete();\n  });\n  return () => {\n    // use the unpatched API no avoid zone interference\n    getZoneUnPatchedApi('cancelAnimationFrame')(id);\n  };\n});\nconst localCredentials = {\n  name: 'local',\n  work: (cdRef, _, notification) => {\n    cdRef.detectChanges();\n  },\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => o$ => o$.pipe(coalesceWith(animationFrameTick(), scope), tap(() => ngZone ? ngZone.run(() => work()) : work()))\n};\nconst noopCredentials = {\n  name: 'noop',\n  work: () => void 0,\n  behavior: () => o$ => o$\n};\nconst nativeCredentials = {\n  name: 'native',\n  work: cdRef => cdRef.markForCheck(),\n  behavior: ({\n    work,\n    ngZone\n  }) => o$ => o$.pipe(tap(() => ngZone && !NgZone.isInAngularZone() ? ngZone.run(() => work()) : work()))\n};\nconst RX_NATIVE_STRATEGIES = {\n  native: nativeCredentials,\n  noop: noopCredentials,\n  local: localCredentials\n};\nconst RX_RENDER_STRATEGIES_CONFIG = new InjectionToken('rxa-render-strategies-config');\nconst RX_RENDER_STRATEGIES_DEFAULTS = {\n  primaryStrategy: 'normal',\n  customStrategies: {\n    ...RX_NATIVE_STRATEGIES,\n    ...RX_CONCURRENT_STRATEGIES\n  },\n  patchZone: true,\n  parent: true\n};\nfunction mergeDefaultConfig(cfg) {\n  const custom = cfg ? cfg : {\n    customStrategies: {}\n  };\n  return {\n    ...RX_RENDER_STRATEGIES_DEFAULTS,\n    ...custom,\n    customStrategies: {\n      ...custom.customStrategies,\n      ...RX_RENDER_STRATEGIES_DEFAULTS.customStrategies\n    }\n  };\n}\n\n/**\n * @internal\n *\n * @param value\n * @param strategy\n * @param workFactory\n * @param options\n */\nfunction onStrategy(value, strategy, workFactory, options = {}) {\n  return new Observable(subscriber => {\n    subscriber.next(value);\n  }).pipe(strategy.behavior({\n    work: () => workFactory(value, strategy.work, options),\n    scope: options.scope || {},\n    ngZone: options.ngZone\n  }), catchError(error => throwError(() => [error, value])), map(() => value), take(1));\n}\n\n/**\n * @description\n * RxStrategyProvider is a wrapper service that you can use to consume strategies and schedule your code execution.\n *\n * @example\n * Component({\n *   selector: 'app-service-communicator',\n *   template: ``\n * });\n * export class ServiceCommunicationComponent {\n *   private currentUserSettings;\n *\n *   constructor(\n *     private strategyProvider: RxStrategyProvider,\n *     private userService: UserService,\n *     private backgroundSync: BackgroundSyncService\n *   ) {\n *     this.userService.fetchCurrentUserSettings\n *       .pipe(\n *         tap(settings => (this.currentUserSettings = settings)),\n *         this.strategyProvider.scheduleWith(\n *           settings => this.backgroundSync.openConnection(settings),\n *           { strategy: 'idle' }\n *         )\n *       )\n *       .subscribe();\n *   }\n * }\n *\n * @docsCategory RxStrategyProvider\n * @docsPage RxStrategyProvider\n */\nclass RxStrategyProvider {\n  /**\n   * @internal\n   */\n  constructor(cfg) {\n    this._strategies$ = new BehaviorSubject(undefined);\n    this._primaryStrategy$ = new BehaviorSubject(undefined);\n    /**\n     * @description\n     * Current strategy of the service as an observable.\n     */\n    this.primaryStrategy$ = this._primaryStrategy$.asObservable();\n    /**\n     * @description\n     * Returns observable of an object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\n     */\n    this.strategies$ = this._strategies$.asObservable();\n    /**\n     * @description\n     * Returns an observable of an array of strategy names available in the service.\n     */\n    this.strategyNames$ = this.strategies$.pipe(map(strategies => Object.values(strategies).map(s => s.name)), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this._cfg = mergeDefaultConfig(cfg);\n    this._strategies$.next(this._cfg.customStrategies);\n    this.primaryStrategy = this.config.primaryStrategy;\n  }\n  /**\n   * @description\n   * Returns current `RxAngularConfig` used in the service.\n   * Config includes:\n   * - strategy that currently in use - `primaryStrategy`\n   * - array of custom user defined strategies - `customStrategies`\n   * - setting that is responsible for running in our outside of the zone.js - `patchZone`\n   */\n  get config() {\n    return this._cfg;\n  }\n  /**\n   * @description\n   * Returns object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\n   */\n  get strategies() {\n    return this._strategies$.getValue();\n  }\n  /**\n   * @description\n   * Returns an array of strategy names available in the service.\n   */\n  get strategyNames() {\n    return Object.values(this.strategies).map(s => s.name);\n  }\n  /**\n   * @description\n   * Returns current strategy of the service.\n   */\n  get primaryStrategy() {\n    return this._primaryStrategy$.getValue().name;\n  }\n  /**\n   * @description\n   * Set's the strategy that will be used by the service.\n   */\n  set primaryStrategy(strategyName) {\n    this._primaryStrategy$.next(this.strategies[strategyName]);\n  }\n  /**\n   * @description\n   * Allows to schedule a work inside rxjs `pipe`. Accepts the work and configuration options object.\n   * - work is any function that should be executed\n   * - (optional) options includes strategy, patchZone and scope\n   *\n   * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\n   * Scope setup is useful if your work is some of the methods of `ChangeDetectorRef`. Only one change detection will be triggered if you have multiple schedules of change detection methods and scope is set to `this`.\n   *\n   * @example\n   * myObservable$.pipe(\n   *    this.strategyProvider.scheduleWith(() => myWork(), {strategy: 'idle', patchZone: false})\n   * ).subscribe();\n   *\n   * @return MonoTypeOperatorFunction<R>\n   */\n  scheduleWith(work, options) {\n    const strategy = this.strategies[options?.strategy || this.primaryStrategy];\n    const scope = options?.scope || {};\n    const _work = getWork(work, options?.patchZone);\n    const ngZone = options?.patchZone || undefined;\n    return o$ => o$.pipe(switchMap(v => onStrategy(v, strategy, _v => {\n      _work(_v);\n    }, {\n      scope,\n      ngZone\n    })));\n  }\n  /**\n   * @description\n   * Allows to schedule a work as an observable. Accepts the work and configuration options object.\n   * - work is any function that should be executed\n   * - (optional) options includes strategy, patchZone and scope\n   *\n   * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\n   * Scope setup is especially useful if you provide work that will trigger a change detection.\n   *\n   * @example\n   * this.strategyProvider.schedule(() => myWork(), {strategy: 'idle', patchZone: false}).subscribe();\n   *\n   * @return Observable<R>\n   */\n  schedule(work, options) {\n    const strategy = this.strategies[options?.strategy || this.primaryStrategy];\n    const scope = options?.scope || {};\n    const _work = getWork(work, options?.patchZone);\n    const ngZone = options?.patchZone || undefined;\n    let returnVal;\n    return onStrategy(null, strategy, () => {\n      returnVal = _work();\n    }, {\n      scope,\n      ngZone\n    }).pipe(map(() => returnVal));\n  }\n  /**\n   * @description\n   * Allows to schedule a change detection cycle. Accepts the ChangeDetectorRef and configuration options object.\n   * Options include:\n   * - afterCD which is the work that should be executed after change detection cycle.\n   * - abortCtrl is an AbortController that you can use to cancel the scheduled cycle.\n   *\n   * @example\n   * this.strategyProvider.scheduleCd(this.changeDetectorRef, {afterCD: myWork()});\n   *\n   * @return AbortController\n   */\n  scheduleCD(cdRef, options) {\n    const strategy = this.strategies[options?.strategy || this.primaryStrategy];\n    const scope = options?.scope || cdRef;\n    const abC = options?.abortCtrl || new AbortController();\n    const ngZone = options?.patchZone || undefined;\n    const work = getWork(() => {\n      strategy.work(cdRef, scope);\n      if (options?.afterCD) {\n        options.afterCD();\n      }\n    }, options.patchZone);\n    onStrategy(null, strategy, () => {\n      work();\n    }, {\n      scope,\n      ngZone\n    }).pipe(takeUntil(fromEvent(abC.signal, 'abort'))).subscribe();\n    return abC;\n  }\n}\n/** @nocollapse */\nRxStrategyProvider.ɵfac = function RxStrategyProvider_Factory(t) {\n  return new (t || RxStrategyProvider)(i0.ɵɵinject(RX_RENDER_STRATEGIES_CONFIG, 8));\n};\n/** @nocollapse */\nRxStrategyProvider.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxStrategyProvider,\n  factory: RxStrategyProvider.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxStrategyProvider, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RX_RENDER_STRATEGIES_CONFIG]\n      }]\n    }];\n  }, null);\n})();\nfunction getWork(work, patchZone) {\n  let _work = work;\n  if (patchZone) {\n    _work = args => patchZone.run(() => work(args));\n  }\n  return _work;\n}\n\n/**\n * @internal\n *\n * A factory function returning an object to handle the process of turning strategy names into `RxStrategyCredentials`\n * You can next a strategy name as Observable or string and get an Observable of `RxStrategyCredentials`\n *\n * @param defaultStrategyName\n * @param strategies\n */\nfunction strategyHandling(defaultStrategyName, strategies) {\n  const hotFlattened = coerceAllFactory(() => new ReplaySubject(1), switchAll());\n  return {\n    strategy$: hotFlattened.values$.pipe(startWith(defaultStrategyName), nameToStrategyCredentials(strategies, defaultStrategyName), share()),\n    next(name) {\n      hotFlattened.next(name);\n    }\n  };\n}\n/**\n * @internal\n */\nfunction nameToStrategyCredentials(strategies, defaultStrategyName) {\n  return o$ => o$.pipe(map(name => name && Object.keys(strategies).includes(name) ? strategies[name] : strategies[defaultStrategyName]));\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RX_CONCURRENT_STRATEGIES, RX_NATIVE_STRATEGIES, RX_RENDER_STRATEGIES_CONFIG, RxStrategyProvider, onStrategy, strategyHandling };","map":{"version":3,"names":["i0","NgZone","InjectionToken","Injectable","Optional","Inject","Observable","throwError","BehaviorSubject","fromEvent","ReplaySubject","filter","switchMap","mapTo","tap","catchError","map","take","shareReplay","takeUntil","switchAll","startWith","share","forceFrameRate","scheduleCallback","cancelCallback","coalescingManager","coalesceWith","getZoneUnPatchedApi","coerceAllFactory","immediateStrategy","name","work","cdRef","detectChanges","behavior","scope","ngZone","o$","pipe","scheduleOnQueue","priority","userBlockingStrategy","normalStrategy","lowStrategy","idleStrategy","options","isCoalescing","v","subscriber","add","task","remove","next","delay","RX_CONCURRENT_STRATEGIES","immediate","userBlocking","normal","low","idle","animationFrameTick","id","complete","localCredentials","_","notification","run","noopCredentials","nativeCredentials","markForCheck","isInAngularZone","RX_NATIVE_STRATEGIES","native","noop","local","RX_RENDER_STRATEGIES_CONFIG","RX_RENDER_STRATEGIES_DEFAULTS","primaryStrategy","customStrategies","patchZone","parent","mergeDefaultConfig","cfg","custom","onStrategy","value","strategy","workFactory","error","RxStrategyProvider","constructor","_strategies$","undefined","_primaryStrategy$","primaryStrategy$","asObservable","strategies$","strategyNames$","strategies","Object","values","s","bufferSize","refCount","_cfg","config","getValue","strategyNames","strategyName","scheduleWith","_work","getWork","_v","schedule","returnVal","scheduleCD","abC","abortCtrl","AbortController","afterCD","signal","subscribe","ɵfac","ɵprov","type","args","providedIn","decorators","strategyHandling","defaultStrategyName","hotFlattened","strategy$","values$","nameToStrategyCredentials","keys","includes"],"sources":["C:/Development/AngularComponent/ClientApp/node_modules/@rx-angular/cdk/fesm2020/cdk-render-strategies.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { NgZone, InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, throwError, BehaviorSubject, fromEvent, ReplaySubject } from 'rxjs';\nimport { filter, switchMap, mapTo, tap, catchError, map, take, shareReplay, takeUntil, switchAll, startWith, share } from 'rxjs/operators';\nimport { forceFrameRate, scheduleCallback, cancelCallback } from '@rx-angular/cdk/internals/scheduler';\nimport { coalescingManager, coalesceWith } from '@rx-angular/cdk/coalescing';\nimport { getZoneUnPatchedApi } from '@rx-angular/cdk/internals/core';\nimport { coerceAllFactory } from '@rx-angular/cdk/coercing';\n\n// set default to 60fps\nforceFrameRate(60);\nconst immediateStrategy = {\n    name: 'immediate',\n    work: (cdRef) => cdRef.detectChanges(),\n    behavior: ({ work, scope, ngZone }) => {\n        return (o$) => o$.pipe(scheduleOnQueue(work, {\n            ngZone,\n            priority: 1 /* ImmediatePriority */,\n            scope,\n        }));\n    },\n};\nconst userBlockingStrategy = {\n    name: 'userBlocking',\n    work: (cdRef) => cdRef.detectChanges(),\n    behavior: ({ work, scope, ngZone }) => {\n        return (o$) => o$.pipe(scheduleOnQueue(work, {\n            ngZone,\n            priority: 2 /* UserBlockingPriority */,\n            scope,\n        }));\n    },\n};\nconst normalStrategy = {\n    name: 'normal',\n    work: (cdRef) => cdRef.detectChanges(),\n    behavior: ({ work, scope, ngZone }) => {\n        return (o$) => o$.pipe(scheduleOnQueue(work, {\n            ngZone,\n            priority: 3 /* NormalPriority */,\n            scope,\n        }));\n    },\n};\nconst lowStrategy = {\n    name: 'low',\n    work: (cdRef) => cdRef.detectChanges(),\n    behavior: ({ work, scope, ngZone }) => {\n        return (o$) => o$.pipe(scheduleOnQueue(work, {\n            ngZone,\n            priority: 4 /* LowPriority */,\n            scope,\n        }));\n    },\n};\nconst idleStrategy = {\n    name: 'idle',\n    work: (cdRef) => cdRef.detectChanges(),\n    behavior: ({ work, scope, ngZone }) => {\n        return (o$) => o$.pipe(scheduleOnQueue(work, {\n            ngZone,\n            priority: 5 /* IdlePriority */,\n            scope,\n        }));\n    },\n};\nfunction scheduleOnQueue(work, options) {\n    const scope = options.scope || {};\n    return (o$) => o$.pipe(filter(() => !coalescingManager.isCoalescing(scope)), switchMap((v) => new Observable((subscriber) => {\n        coalescingManager.add(scope);\n        const task = scheduleCallback(options.priority, () => {\n            work();\n            coalescingManager.remove(scope);\n            subscriber.next(v);\n        }, { delay: options.delay, ngZone: options.ngZone });\n        return () => {\n            coalescingManager.remove(scope);\n            cancelCallback(task);\n        };\n    }).pipe(mapTo(v))));\n}\nconst RX_CONCURRENT_STRATEGIES = {\n    immediate: immediateStrategy,\n    userBlocking: userBlockingStrategy,\n    normal: normalStrategy,\n    low: lowStrategy,\n    idle: idleStrategy,\n};\n\nconst animationFrameTick = () => new Observable((subscriber) => {\n    // use the unpatched API no avoid zone interference\n    const id = getZoneUnPatchedApi('requestAnimationFrame')(() => {\n        subscriber.next(0);\n        subscriber.complete();\n    });\n    return () => {\n        // use the unpatched API no avoid zone interference\n        getZoneUnPatchedApi('cancelAnimationFrame')(id);\n    };\n});\nconst localCredentials = {\n    name: 'local',\n    work: (cdRef, _, notification) => {\n        cdRef.detectChanges();\n    },\n    behavior: ({ work, scope, ngZone }) => (o$) => o$.pipe(coalesceWith(animationFrameTick(), scope), tap(() => (ngZone ? ngZone.run(() => work()) : work()))),\n};\nconst noopCredentials = {\n    name: 'noop',\n    work: () => void 0,\n    behavior: () => (o$) => o$,\n};\nconst nativeCredentials = {\n    name: 'native',\n    work: (cdRef) => cdRef.markForCheck(),\n    behavior: ({ work, ngZone }) => (o$) => o$.pipe(tap(() => ngZone && !NgZone.isInAngularZone()\n        ? ngZone.run(() => work())\n        : work())),\n};\nconst RX_NATIVE_STRATEGIES = {\n    native: nativeCredentials,\n    noop: noopCredentials,\n    local: localCredentials,\n};\n\nconst RX_RENDER_STRATEGIES_CONFIG = new InjectionToken('rxa-render-strategies-config');\nconst RX_RENDER_STRATEGIES_DEFAULTS = {\n    primaryStrategy: 'normal',\n    customStrategies: {\n        ...RX_NATIVE_STRATEGIES,\n        ...RX_CONCURRENT_STRATEGIES,\n    },\n    patchZone: true,\n    parent: true,\n};\nfunction mergeDefaultConfig(cfg) {\n    const custom = cfg\n        ? cfg\n        : {\n            customStrategies: {},\n        };\n    return {\n        ...RX_RENDER_STRATEGIES_DEFAULTS,\n        ...custom,\n        customStrategies: {\n            ...custom.customStrategies,\n            ...RX_RENDER_STRATEGIES_DEFAULTS.customStrategies,\n        },\n    };\n}\n\n/**\n * @internal\n *\n * @param value\n * @param strategy\n * @param workFactory\n * @param options\n */\nfunction onStrategy(value, strategy, workFactory, options = {}) {\n    return new Observable((subscriber) => {\n        subscriber.next(value);\n    }).pipe(strategy.behavior({\n        work: () => workFactory(value, strategy.work, options),\n        scope: options.scope || {},\n        ngZone: options.ngZone,\n    }), catchError((error) => throwError(() => [error, value])), map(() => value), take(1));\n}\n\n/**\n * @description\n * RxStrategyProvider is a wrapper service that you can use to consume strategies and schedule your code execution.\n *\n * @example\n * Component({\n *   selector: 'app-service-communicator',\n *   template: ``\n * });\n * export class ServiceCommunicationComponent {\n *   private currentUserSettings;\n *\n *   constructor(\n *     private strategyProvider: RxStrategyProvider,\n *     private userService: UserService,\n *     private backgroundSync: BackgroundSyncService\n *   ) {\n *     this.userService.fetchCurrentUserSettings\n *       .pipe(\n *         tap(settings => (this.currentUserSettings = settings)),\n *         this.strategyProvider.scheduleWith(\n *           settings => this.backgroundSync.openConnection(settings),\n *           { strategy: 'idle' }\n *         )\n *       )\n *       .subscribe();\n *   }\n * }\n *\n * @docsCategory RxStrategyProvider\n * @docsPage RxStrategyProvider\n */\nclass RxStrategyProvider {\n    /**\n     * @internal\n     */\n    constructor(cfg) {\n        this._strategies$ = new BehaviorSubject(undefined);\n        this._primaryStrategy$ = new BehaviorSubject(undefined);\n        /**\n         * @description\n         * Current strategy of the service as an observable.\n         */\n        this.primaryStrategy$ = this._primaryStrategy$.asObservable();\n        /**\n         * @description\n         * Returns observable of an object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\n         */\n        this.strategies$ = this._strategies$.asObservable();\n        /**\n         * @description\n         * Returns an observable of an array of strategy names available in the service.\n         */\n        this.strategyNames$ = this.strategies$.pipe(map((strategies) => Object.values(strategies).map((s) => s.name)), shareReplay({ bufferSize: 1, refCount: true }));\n        this._cfg = mergeDefaultConfig(cfg);\n        this._strategies$.next(this._cfg.customStrategies);\n        this.primaryStrategy = this.config.primaryStrategy;\n    }\n    /**\n     * @description\n     * Returns current `RxAngularConfig` used in the service.\n     * Config includes:\n     * - strategy that currently in use - `primaryStrategy`\n     * - array of custom user defined strategies - `customStrategies`\n     * - setting that is responsible for running in our outside of the zone.js - `patchZone`\n     */\n    get config() {\n        return this._cfg;\n    }\n    /**\n     * @description\n     * Returns object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\n     */\n    get strategies() {\n        return this._strategies$.getValue();\n    }\n    /**\n     * @description\n     * Returns an array of strategy names available in the service.\n     */\n    get strategyNames() {\n        return Object.values(this.strategies).map((s) => s.name);\n    }\n    /**\n     * @description\n     * Returns current strategy of the service.\n     */\n    get primaryStrategy() {\n        return this._primaryStrategy$.getValue().name;\n    }\n    /**\n     * @description\n     * Set's the strategy that will be used by the service.\n     */\n    set primaryStrategy(strategyName) {\n        this._primaryStrategy$.next(this.strategies[strategyName]);\n    }\n    /**\n     * @description\n     * Allows to schedule a work inside rxjs `pipe`. Accepts the work and configuration options object.\n     * - work is any function that should be executed\n     * - (optional) options includes strategy, patchZone and scope\n     *\n     * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\n     * Scope setup is useful if your work is some of the methods of `ChangeDetectorRef`. Only one change detection will be triggered if you have multiple schedules of change detection methods and scope is set to `this`.\n     *\n     * @example\n     * myObservable$.pipe(\n     *    this.strategyProvider.scheduleWith(() => myWork(), {strategy: 'idle', patchZone: false})\n     * ).subscribe();\n     *\n     * @return MonoTypeOperatorFunction<R>\n     */\n    scheduleWith(work, options) {\n        const strategy = this.strategies[options?.strategy || this.primaryStrategy];\n        const scope = options?.scope || {};\n        const _work = getWork(work, options?.patchZone);\n        const ngZone = options?.patchZone || undefined;\n        return (o$) => o$.pipe(switchMap((v) => onStrategy(v, strategy, (_v) => {\n            _work(_v);\n        }, { scope, ngZone })));\n    }\n    /**\n     * @description\n     * Allows to schedule a work as an observable. Accepts the work and configuration options object.\n     * - work is any function that should be executed\n     * - (optional) options includes strategy, patchZone and scope\n     *\n     * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\n     * Scope setup is especially useful if you provide work that will trigger a change detection.\n     *\n     * @example\n     * this.strategyProvider.schedule(() => myWork(), {strategy: 'idle', patchZone: false}).subscribe();\n     *\n     * @return Observable<R>\n     */\n    schedule(work, options) {\n        const strategy = this.strategies[options?.strategy || this.primaryStrategy];\n        const scope = options?.scope || {};\n        const _work = getWork(work, options?.patchZone);\n        const ngZone = options?.patchZone || undefined;\n        let returnVal;\n        return onStrategy(null, strategy, () => {\n            returnVal = _work();\n        }, { scope, ngZone }).pipe(map(() => returnVal));\n    }\n    /**\n     * @description\n     * Allows to schedule a change detection cycle. Accepts the ChangeDetectorRef and configuration options object.\n     * Options include:\n     * - afterCD which is the work that should be executed after change detection cycle.\n     * - abortCtrl is an AbortController that you can use to cancel the scheduled cycle.\n     *\n     * @example\n     * this.strategyProvider.scheduleCd(this.changeDetectorRef, {afterCD: myWork()});\n     *\n     * @return AbortController\n     */\n    scheduleCD(cdRef, options) {\n        const strategy = this.strategies[options?.strategy || this.primaryStrategy];\n        const scope = options?.scope || cdRef;\n        const abC = options?.abortCtrl || new AbortController();\n        const ngZone = options?.patchZone || undefined;\n        const work = getWork(() => {\n            strategy.work(cdRef, scope);\n            if (options?.afterCD) {\n                options.afterCD();\n            }\n        }, options.patchZone);\n        onStrategy(null, strategy, () => {\n            work();\n        }, { scope, ngZone })\n            .pipe(takeUntil(fromEvent(abC.signal, 'abort')))\n            .subscribe();\n        return abC;\n    }\n}\n/** @nocollapse */ RxStrategyProvider.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: RxStrategyProvider, deps: [{ token: RX_RENDER_STRATEGIES_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ RxStrategyProvider.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: RxStrategyProvider, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: RxStrategyProvider, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RX_RENDER_STRATEGIES_CONFIG]\n                }] }]; } });\nfunction getWork(work, patchZone) {\n    let _work = work;\n    if (patchZone) {\n        _work = (args) => patchZone.run(() => work(args));\n    }\n    return _work;\n}\n\n/**\n * @internal\n *\n * A factory function returning an object to handle the process of turning strategy names into `RxStrategyCredentials`\n * You can next a strategy name as Observable or string and get an Observable of `RxStrategyCredentials`\n *\n * @param defaultStrategyName\n * @param strategies\n */\nfunction strategyHandling(defaultStrategyName, strategies) {\n    const hotFlattened = coerceAllFactory(() => new ReplaySubject(1), switchAll());\n    return {\n        strategy$: hotFlattened.values$.pipe(startWith(defaultStrategyName), nameToStrategyCredentials(strategies, defaultStrategyName), share()),\n        next(name) {\n            hotFlattened.next(name);\n        },\n    };\n}\n/**\n * @internal\n */\nfunction nameToStrategyCredentials(strategies, defaultStrategyName) {\n    return (o$) => o$.pipe(map((name) => name && Object.keys(strategies).includes(name)\n        ? strategies[name]\n        : strategies[defaultStrategyName]));\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RX_CONCURRENT_STRATEGIES, RX_NATIVE_STRATEGIES, RX_RENDER_STRATEGIES_CONFIG, RxStrategyProvider, onStrategy, strategyHandling };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}