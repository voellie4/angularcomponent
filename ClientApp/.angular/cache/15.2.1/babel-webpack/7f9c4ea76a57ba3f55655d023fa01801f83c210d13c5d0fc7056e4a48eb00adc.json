{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { NgZone, inject, Injectable, ChangeDetectorRef, Directive, Input, NgModule, Pipe } from '@angular/core';\nimport { isObservable, combineLatest, from, Observable, ReplaySubject, pipe, Subscription } from 'rxjs';\nimport { distinctUntilChanged, tap, switchMap } from 'rxjs/operators';\nfunction isNgZone(zone) {\n  return zone instanceof NgZone;\n}\nclass TickScheduler {}\n/** @nocollapse */\nTickScheduler.Éµfac = function TickScheduler_Factory(t) {\n  return new (t || TickScheduler)();\n};\n/** @nocollapse */\nTickScheduler.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: TickScheduler,\n  factory: function () {\n    return (() => {\n      const zone = inject(NgZone);\n      return isNgZone(zone) ? new NoopTickScheduler() : inject(AnimationFrameTickScheduler);\n    })();\n  },\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(TickScheduler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: () => {\n        const zone = inject(NgZone);\n        return isNgZone(zone) ? new NoopTickScheduler() : inject(AnimationFrameTickScheduler);\n      }\n    }]\n  }], null, null);\n})();\nclass AnimationFrameTickScheduler extends TickScheduler {\n  constructor(appRef) {\n    super();\n    this.appRef = appRef;\n    this.isScheduled = false;\n  }\n  schedule() {\n    if (!this.isScheduled) {\n      this.isScheduled = true;\n      requestAnimationFrame(() => {\n        this.appRef.tick();\n        this.isScheduled = false;\n      });\n    }\n  }\n}\n/** @nocollapse */\nAnimationFrameTickScheduler.Éµfac = function AnimationFrameTickScheduler_Factory(t) {\n  return new (t || AnimationFrameTickScheduler)(i0.ÉµÉµinject(i0.ApplicationRef));\n};\n/** @nocollapse */\nAnimationFrameTickScheduler.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: AnimationFrameTickScheduler,\n  factory: AnimationFrameTickScheduler.Éµfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(AnimationFrameTickScheduler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.ApplicationRef\n    }];\n  }, null);\n})();\nclass NoopTickScheduler extends TickScheduler {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  schedule() {}\n}\n\n/**\n * Provides rendering functionality regardless of whether `zone.js` is present\n * or not. It must be provided at the component/directive level.\n *\n * @usageNotes\n *\n * ### Rerender zone-less app on route changes\n *\n * ```ts\n * @Component({\n *   selector: 'app-root',\n *   template: '<router-outlet>',\n *   // ðŸ‘‡ `RenderScheduler` is provided at the component level\n *   providers: [RenderScheduler],\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n * export class AppComponent implements OnInit {\n *   constructor(\n *     private readonly router: Router,\n *     private readonly renderScheduler: RenderScheduler\n *   ) {}\n *\n *   ngOnInit(): void {\n *     this.router.events\n *       .pipe(filter((e) => e instanceof NavigationEnd))\n *       .subscribe(() => this.renderScheduler.schedule());\n *   }\n * }\n * ```\n *\n * ### Rerender component on interval\n *\n * ```ts\n * @Component({\n *   selector: 'app-interval',\n *   template: '{{ elapsedTime }}ms',\n *   // ðŸ‘‡ `RenderScheduler` is provided at the component level\n *   providers: [RenderScheduler],\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n * export class IntervalComponent implements OnInit {\n *   elapsedTime = 0;\n *\n *   constructor(private readonly renderScheduler: RenderScheduler) {}\n *\n *   ngOnInit(): void {\n *     setInterval(() => {\n *       this.elapsedTime += 1000;\n *       this.renderScheduler.schedule();\n *     }, 1000);\n *   }\n * }\n * ```\n */\nclass RenderScheduler {\n  constructor(cdRef, tickScheduler) {\n    this.cdRef = cdRef;\n    this.tickScheduler = tickScheduler;\n  }\n  /**\n   * Marks component and its ancestors as dirty.\n   * It also schedules a new change detection cycle in zone-less mode.\n   */\n  schedule() {\n    this.cdRef.markForCheck();\n    this.tickScheduler.schedule();\n  }\n}\n/** @nocollapse */\nRenderScheduler.Éµfac = function RenderScheduler_Factory(t) {\n  return new (t || RenderScheduler)(i0.ÉµÉµinject(i0.ChangeDetectorRef), i0.ÉµÉµinject(TickScheduler));\n};\n/** @nocollapse */\nRenderScheduler.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: RenderScheduler,\n  factory: RenderScheduler.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(RenderScheduler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: TickScheduler\n    }];\n  }, null);\n})();\nfunction createRenderScheduler() {\n  return new RenderScheduler(inject(ChangeDetectorRef), inject(TickScheduler));\n}\nfunction combineRenderEventHandlers(handlers) {\n  return event => handlers[event.type]?.(event);\n}\nfunction fromPotentialObservable(potentialObservable) {\n  if (isObservable(potentialObservable)) {\n    return potentialObservable;\n  }\n  if (isObservableDictionary(potentialObservable)) {\n    return combineLatest(toDistinctObsDictionary(potentialObservable));\n  }\n  if (isPromiseLike(potentialObservable)) {\n    return from(potentialObservable);\n  }\n  return new Observable(subscriber => {\n    subscriber.next(potentialObservable);\n  });\n}\nfunction isPromiseLike(value) {\n  return typeof value?.then === 'function';\n}\nfunction isObservableDictionary(value) {\n  return isDictionary(value) && Object.keys(value).length > 0 && Object.values(value).every(isObservable);\n}\nfunction isDictionary(value) {\n  return !!value && typeof value === 'object' && !Array.isArray(value);\n}\nfunction toDistinctObsDictionary(obsDictionary) {\n  return Object.keys(obsDictionary).reduce((acc, key) => ({\n    ...acc,\n    [key]: obsDictionary[key].pipe(distinctUntilChanged())\n  }), {});\n}\nfunction createRenderEventManager(handlers) {\n  const handleRenderEvent = combineRenderEventHandlers(handlers);\n  const potentialObservable$ = new ReplaySubject(1);\n  return {\n    nextPotentialObservable(potentialObservable) {\n      potentialObservable$.next(potentialObservable);\n    },\n    handlePotentialObservableChanges() {\n      return potentialObservable$.pipe(distinctUntilChanged(), switchMapToRenderEvent(), distinctUntilChanged(renderEventComparator), tap(handleRenderEvent));\n    }\n  };\n}\nfunction switchMapToRenderEvent() {\n  return pipe(switchMap(potentialObservable => {\n    const observable$ = fromPotentialObservable(potentialObservable);\n    let reset = true;\n    let synchronous = true;\n    return new Observable(subscriber => {\n      const subscription = observable$.subscribe({\n        next(value) {\n          subscriber.next({\n            type: 'next',\n            value,\n            reset,\n            synchronous\n          });\n          reset = false;\n        },\n        error(error) {\n          subscriber.next({\n            type: 'error',\n            error,\n            reset,\n            synchronous\n          });\n          reset = false;\n        },\n        complete() {\n          subscriber.next({\n            type: 'complete',\n            reset,\n            synchronous\n          });\n          reset = false;\n        }\n      });\n      if (reset) {\n        subscriber.next({\n          type: 'suspense',\n          reset,\n          synchronous: true\n        });\n        reset = false;\n      }\n      synchronous = false;\n      return subscription;\n    });\n  }));\n}\nfunction renderEventComparator(previous, current) {\n  if (previous.type !== current.type || previous.reset !== current.reset) {\n    return false;\n  }\n  if (current.type === 'next') {\n    return previous.value === current.value;\n  }\n  if (current.type === 'error') {\n    return previous.error === current.error;\n  }\n  return true;\n}\n\n/**\n * @ngModule LetModule\n *\n * @description\n *\n * The `*ngrxLet` directive serves a convenient way of binding observables to a view context\n * (DOM element's scope). It also helps with several internal processing under the hood.\n *\n * @usageNotes\n *\n * ### Displaying Observable Values\n *\n * ```html\n * <ng-container *ngrxLet=\"number$ as n\">\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n *\n * <ng-container *ngrxLet=\"number$; let n\">\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n * ```\n *\n * ### Tracking Different Observable Events\n *\n * ```html\n * <ng-container *ngrxLet=\"number$ as n; error as e; complete as c\">\n *   <app-number [number]=\"n\" *ngIf=\"!e && !c\">\n *   </app-number>\n *\n *   <p *ngIf=\"e\">There is an error: {{ e }}</p>\n *   <p *ngIf=\"c\">Observable is completed.</p>\n * </ng-container>\n * ```\n *\n * ### Combining Multiple Observables\n *\n * ```html\n * <ng-container *ngrxLet=\"{ users: users$, query: query$ } as vm\">\n *   <app-search-bar [query]=\"vm.query\"></app-search-bar>\n *   <app-user-list [users]=\"vm.users\"></app-user-list>\n * </ng-container>\n * ```\n *\n * ### Using Suspense Template\n *\n * ```html\n * <ng-container *ngrxLet=\"number$ as n; suspenseTpl: loading\">\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n *\n * <ng-template #loading>\n *   <p>Loading...</p>\n * </ng-template>\n * ```\n *\n * ### Using Aliases for Non-Observable Values\n *\n * ```html\n * <ng-container *ngrxLet=\"userForm.controls.email as email\">\n *   <input type=\"text\" [formControl]=\"email\" />\n *\n *   <ng-container *ngIf=\"email.errors && (email.touched || email.dirty)\">\n *     <p *ngIf=\"email.errors.required\">This field is required.</p>\n *     <p *ngIf=\"email.errors.email\">This field must be an email.</p>\n *   </ng-container>\n * </ng-container>\n * ```\n *\n * @publicApi\n */\nclass LetDirective {\n  constructor(mainTemplateRef, viewContainerRef, errorHandler, renderScheduler) {\n    this.mainTemplateRef = mainTemplateRef;\n    this.viewContainerRef = viewContainerRef;\n    this.errorHandler = errorHandler;\n    this.renderScheduler = renderScheduler;\n    this.isMainViewCreated = false;\n    this.isSuspenseViewCreated = false;\n    this.viewContext = {\n      $implicit: undefined,\n      ngrxLet: undefined,\n      error: undefined,\n      complete: false\n    };\n    this.renderEventManager = createRenderEventManager({\n      suspense: () => {\n        this.viewContext.$implicit = undefined;\n        this.viewContext.ngrxLet = undefined;\n        this.viewContext.error = undefined;\n        this.viewContext.complete = false;\n        this.renderSuspenseView();\n      },\n      next: event => {\n        this.viewContext.$implicit = event.value;\n        this.viewContext.ngrxLet = event.value;\n        if (event.reset) {\n          this.viewContext.error = undefined;\n          this.viewContext.complete = false;\n        }\n        this.renderMainView(event.synchronous);\n      },\n      error: event => {\n        this.viewContext.error = event.error;\n        if (event.reset) {\n          this.viewContext.$implicit = undefined;\n          this.viewContext.ngrxLet = undefined;\n          this.viewContext.complete = false;\n        }\n        this.renderMainView(event.synchronous);\n        this.errorHandler.handleError(event.error);\n      },\n      complete: event => {\n        this.viewContext.complete = true;\n        if (event.reset) {\n          this.viewContext.$implicit = undefined;\n          this.viewContext.ngrxLet = undefined;\n          this.viewContext.error = undefined;\n        }\n        this.renderMainView(event.synchronous);\n      }\n    });\n    this.subscription = new Subscription();\n  }\n  set ngrxLet(potentialObservable) {\n    this.renderEventManager.nextPotentialObservable(potentialObservable);\n  }\n  static ngTemplateContextGuard(dir, ctx) {\n    return true;\n  }\n  ngOnInit() {\n    this.subscription.add(this.renderEventManager.handlePotentialObservableChanges().subscribe());\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  renderMainView(isSyncEvent) {\n    if (this.isSuspenseViewCreated) {\n      this.isSuspenseViewCreated = false;\n      this.viewContainerRef.clear();\n    }\n    if (!this.isMainViewCreated) {\n      this.isMainViewCreated = true;\n      this.viewContainerRef.createEmbeddedView(this.mainTemplateRef, this.viewContext);\n    }\n    if (!isSyncEvent) {\n      this.renderScheduler.schedule();\n    }\n  }\n  renderSuspenseView() {\n    if (this.isMainViewCreated) {\n      this.isMainViewCreated = false;\n      this.viewContainerRef.clear();\n    }\n    if (this.suspenseTemplateRef && !this.isSuspenseViewCreated) {\n      this.isSuspenseViewCreated = true;\n      this.viewContainerRef.createEmbeddedView(this.suspenseTemplateRef);\n    }\n  }\n}\n/** @nocollapse */\nLetDirective.Éµfac = function LetDirective_Factory(t) {\n  return new (t || LetDirective)(i0.ÉµÉµdirectiveInject(i0.TemplateRef), i0.ÉµÉµdirectiveInject(i0.ViewContainerRef), i0.ÉµÉµdirectiveInject(i0.ErrorHandler), i0.ÉµÉµdirectiveInject(RenderScheduler));\n};\n/** @nocollapse */\nLetDirective.Éµdir = /* @__PURE__ */i0.ÉµÉµdefineDirective({\n  type: LetDirective,\n  selectors: [[\"\", \"ngrxLet\", \"\"]],\n  inputs: {\n    ngrxLet: \"ngrxLet\",\n    suspenseTemplateRef: [\"ngrxLetSuspenseTpl\", \"suspenseTemplateRef\"]\n  },\n  features: [i0.ÉµÉµProvidersFeature([RenderScheduler])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(LetDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngrxLet]',\n      providers: [RenderScheduler]\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.ErrorHandler\n    }, {\n      type: RenderScheduler\n    }];\n  }, {\n    ngrxLet: [{\n      type: Input\n    }],\n    suspenseTemplateRef: [{\n      type: Input,\n      args: ['ngrxLetSuspenseTpl']\n    }]\n  });\n})();\nclass LetModule {}\n/** @nocollapse */\nLetModule.Éµfac = function LetModule_Factory(t) {\n  return new (t || LetModule)();\n};\n/** @nocollapse */\nLetModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: LetModule\n});\n/** @nocollapse */\nLetModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(LetModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [LetDirective],\n      exports: [LetDirective]\n    }]\n  }], null, null);\n})();\n\n/**\n * @ngModule PushModule\n *\n * @description\n *\n * The `ngrxPush` pipe serves as a drop-in replacement for the `async` pipe.\n * It contains intelligent handling of change detection to enable us\n * running in zone-full as well as zone-less mode without any changes to the code.\n *\n * @usageNotes\n *\n * ### Displaying Observable Values\n *\n * ```html\n * <p>{{ number$ | ngrxPush }}</p>\n *\n * <ng-container *ngIf=\"number$ | ngrxPush as n\">{{ n }}</ng-container>\n *\n * <app-number [number]=\"number$ | ngrxPush\"></app-number>\n * ```\n *\n * ### Combining Multiple Observables\n *\n * ```html\n * <code>\n *   {{ { users: users$, query: query$ } | ngrxPush | json }}\n * </code>\n * ```\n *\n * @publicApi\n */\nclass PushPipe {\n  constructor(errorHandler) {\n    this.errorHandler = errorHandler;\n    this.renderScheduler = createRenderScheduler();\n    this.renderEventManager = createRenderEventManager({\n      suspense: event => this.setRenderedValue(undefined, event.synchronous),\n      next: event => this.setRenderedValue(event.value, event.synchronous),\n      error: event => {\n        if (event.reset) {\n          this.setRenderedValue(undefined, event.synchronous);\n        }\n        this.errorHandler.handleError(event.error);\n      },\n      complete: event => {\n        if (event.reset) {\n          this.setRenderedValue(undefined, event.synchronous);\n        }\n      }\n    });\n    this.subscription = this.renderEventManager.handlePotentialObservableChanges().subscribe();\n  }\n  transform(potentialObservable) {\n    this.renderEventManager.nextPotentialObservable(potentialObservable);\n    return this.renderedValue;\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  setRenderedValue(value, isSyncEvent) {\n    if (value !== this.renderedValue) {\n      this.renderedValue = value;\n      if (!isSyncEvent) {\n        this.renderScheduler.schedule();\n      }\n    }\n  }\n}\n/** @nocollapse */\nPushPipe.Éµfac = function PushPipe_Factory(t) {\n  return new (t || PushPipe)(i0.ÉµÉµdirectiveInject(i0.ErrorHandler, 16));\n};\n/** @nocollapse */\nPushPipe.Éµpipe = /* @__PURE__ */i0.ÉµÉµdefinePipe({\n  name: \"ngrxPush\",\n  type: PushPipe,\n  pure: false\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(PushPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'ngrxPush',\n      pure: false\n    }]\n  }], function () {\n    return [{\n      type: i0.ErrorHandler\n    }];\n  }, null);\n})();\nclass PushModule {}\n/** @nocollapse */\nPushModule.Éµfac = function PushModule_Factory(t) {\n  return new (t || PushModule)();\n};\n/** @nocollapse */\nPushModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: PushModule\n});\n/** @nocollapse */\nPushModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(PushModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [PushPipe],\n      exports: [PushPipe]\n    }]\n  }], null, null);\n})();\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LetDirective, LetModule, PushModule, PushPipe, RenderScheduler };\n//# sourceMappingURL=ngrx-component.mjs.map","map":{"version":3,"names":["i0","NgZone","inject","Injectable","ChangeDetectorRef","Directive","Input","NgModule","Pipe","isObservable","combineLatest","from","Observable","ReplaySubject","pipe","Subscription","distinctUntilChanged","tap","switchMap","isNgZone","zone","TickScheduler","Éµfac","Éµprov","NoopTickScheduler","AnimationFrameTickScheduler","type","args","providedIn","useFactory","constructor","appRef","isScheduled","schedule","requestAnimationFrame","tick","ApplicationRef","RenderScheduler","cdRef","tickScheduler","markForCheck","createRenderScheduler","combineRenderEventHandlers","handlers","event","fromPotentialObservable","potentialObservable","isObservableDictionary","toDistinctObsDictionary","isPromiseLike","subscriber","next","value","then","isDictionary","Object","keys","length","values","every","Array","isArray","obsDictionary","reduce","acc","key","createRenderEventManager","handleRenderEvent","potentialObservable$","nextPotentialObservable","handlePotentialObservableChanges","switchMapToRenderEvent","renderEventComparator","observable$","reset","synchronous","subscription","subscribe","error","complete","previous","current","LetDirective","mainTemplateRef","viewContainerRef","errorHandler","renderScheduler","isMainViewCreated","isSuspenseViewCreated","viewContext","$implicit","undefined","ngrxLet","renderEventManager","suspense","renderSuspenseView","renderMainView","handleError","ngTemplateContextGuard","dir","ctx","ngOnInit","add","ngOnDestroy","unsubscribe","isSyncEvent","clear","createEmbeddedView","suspenseTemplateRef","TemplateRef","ViewContainerRef","ErrorHandler","Éµdir","selector","providers","LetModule","Éµmod","Éµinj","declarations","exports","PushPipe","setRenderedValue","transform","renderedValue","Éµpipe","name","pure","PushModule"],"sources":["C:/Development/AngularComponent/ClientApp/node_modules/@ngrx/component/fesm2020/ngrx-component.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { NgZone, inject, Injectable, ChangeDetectorRef, Directive, Input, NgModule, Pipe } from '@angular/core';\nimport { isObservable, combineLatest, from, Observable, ReplaySubject, pipe, Subscription } from 'rxjs';\nimport { distinctUntilChanged, tap, switchMap } from 'rxjs/operators';\n\nfunction isNgZone(zone) {\n    return zone instanceof NgZone;\n}\n\nclass TickScheduler {\n}\n/** @nocollapse */ TickScheduler.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: TickScheduler, deps: [], target: i0.ÉµÉµFactoryTarget.Injectable });\n/** @nocollapse */ TickScheduler.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: TickScheduler, providedIn: 'root', useFactory: () => {\n        const zone = inject(NgZone);\n        return isNgZone(zone)\n            ? new NoopTickScheduler()\n            : inject(AnimationFrameTickScheduler);\n    } });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: TickScheduler, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                    useFactory: () => {\n                        const zone = inject(NgZone);\n                        return isNgZone(zone)\n                            ? new NoopTickScheduler()\n                            : inject(AnimationFrameTickScheduler);\n                    },\n                }]\n        }] });\nclass AnimationFrameTickScheduler extends TickScheduler {\n    constructor(appRef) {\n        super();\n        this.appRef = appRef;\n        this.isScheduled = false;\n    }\n    schedule() {\n        if (!this.isScheduled) {\n            this.isScheduled = true;\n            requestAnimationFrame(() => {\n                this.appRef.tick();\n                this.isScheduled = false;\n            });\n        }\n    }\n}\n/** @nocollapse */ AnimationFrameTickScheduler.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: AnimationFrameTickScheduler, deps: [{ token: i0.ApplicationRef }], target: i0.ÉµÉµFactoryTarget.Injectable });\n/** @nocollapse */ AnimationFrameTickScheduler.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: AnimationFrameTickScheduler, providedIn: 'root' });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: AnimationFrameTickScheduler, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }]; } });\nclass NoopTickScheduler extends TickScheduler {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    schedule() { }\n}\n\n/**\n * Provides rendering functionality regardless of whether `zone.js` is present\n * or not. It must be provided at the component/directive level.\n *\n * @usageNotes\n *\n * ### Rerender zone-less app on route changes\n *\n * ```ts\n * @Component({\n *   selector: 'app-root',\n *   template: '<router-outlet>',\n *   // ðŸ‘‡ `RenderScheduler` is provided at the component level\n *   providers: [RenderScheduler],\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n * export class AppComponent implements OnInit {\n *   constructor(\n *     private readonly router: Router,\n *     private readonly renderScheduler: RenderScheduler\n *   ) {}\n *\n *   ngOnInit(): void {\n *     this.router.events\n *       .pipe(filter((e) => e instanceof NavigationEnd))\n *       .subscribe(() => this.renderScheduler.schedule());\n *   }\n * }\n * ```\n *\n * ### Rerender component on interval\n *\n * ```ts\n * @Component({\n *   selector: 'app-interval',\n *   template: '{{ elapsedTime }}ms',\n *   // ðŸ‘‡ `RenderScheduler` is provided at the component level\n *   providers: [RenderScheduler],\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n * export class IntervalComponent implements OnInit {\n *   elapsedTime = 0;\n *\n *   constructor(private readonly renderScheduler: RenderScheduler) {}\n *\n *   ngOnInit(): void {\n *     setInterval(() => {\n *       this.elapsedTime += 1000;\n *       this.renderScheduler.schedule();\n *     }, 1000);\n *   }\n * }\n * ```\n */\nclass RenderScheduler {\n    constructor(cdRef, tickScheduler) {\n        this.cdRef = cdRef;\n        this.tickScheduler = tickScheduler;\n    }\n    /**\n     * Marks component and its ancestors as dirty.\n     * It also schedules a new change detection cycle in zone-less mode.\n     */\n    schedule() {\n        this.cdRef.markForCheck();\n        this.tickScheduler.schedule();\n    }\n}\n/** @nocollapse */ RenderScheduler.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RenderScheduler, deps: [{ token: i0.ChangeDetectorRef }, { token: TickScheduler }], target: i0.ÉµÉµFactoryTarget.Injectable });\n/** @nocollapse */ RenderScheduler.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RenderScheduler });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: RenderScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: TickScheduler }]; } });\nfunction createRenderScheduler() {\n    return new RenderScheduler(inject(ChangeDetectorRef), inject(TickScheduler));\n}\n\nfunction combineRenderEventHandlers(handlers) {\n    return (event) => handlers[event.type]?.(event);\n}\n\nfunction fromPotentialObservable(potentialObservable) {\n    if (isObservable(potentialObservable)) {\n        return potentialObservable;\n    }\n    if (isObservableDictionary(potentialObservable)) {\n        return combineLatest(toDistinctObsDictionary(potentialObservable));\n    }\n    if (isPromiseLike(potentialObservable)) {\n        return from(potentialObservable);\n    }\n    return new Observable((subscriber) => {\n        subscriber.next(potentialObservable);\n    });\n}\nfunction isPromiseLike(value) {\n    return typeof value?.then === 'function';\n}\nfunction isObservableDictionary(value) {\n    return (isDictionary(value) &&\n        Object.keys(value).length > 0 &&\n        Object.values(value).every(isObservable));\n}\nfunction isDictionary(value) {\n    return !!value && typeof value === 'object' && !Array.isArray(value);\n}\nfunction toDistinctObsDictionary(obsDictionary) {\n    return Object.keys(obsDictionary).reduce((acc, key) => ({\n        ...acc,\n        [key]: obsDictionary[key].pipe(distinctUntilChanged()),\n    }), {});\n}\n\nfunction createRenderEventManager(handlers) {\n    const handleRenderEvent = combineRenderEventHandlers(handlers);\n    const potentialObservable$ = new ReplaySubject(1);\n    return {\n        nextPotentialObservable(potentialObservable) {\n            potentialObservable$.next(potentialObservable);\n        },\n        handlePotentialObservableChanges() {\n            return potentialObservable$.pipe(distinctUntilChanged(), switchMapToRenderEvent(), distinctUntilChanged(renderEventComparator), tap(handleRenderEvent));\n        },\n    };\n}\nfunction switchMapToRenderEvent() {\n    return pipe(switchMap((potentialObservable) => {\n        const observable$ = fromPotentialObservable(potentialObservable);\n        let reset = true;\n        let synchronous = true;\n        return new Observable((subscriber) => {\n            const subscription = observable$.subscribe({\n                next(value) {\n                    subscriber.next({ type: 'next', value, reset, synchronous });\n                    reset = false;\n                },\n                error(error) {\n                    subscriber.next({ type: 'error', error, reset, synchronous });\n                    reset = false;\n                },\n                complete() {\n                    subscriber.next({ type: 'complete', reset, synchronous });\n                    reset = false;\n                },\n            });\n            if (reset) {\n                subscriber.next({ type: 'suspense', reset, synchronous: true });\n                reset = false;\n            }\n            synchronous = false;\n            return subscription;\n        });\n    }));\n}\nfunction renderEventComparator(previous, current) {\n    if (previous.type !== current.type || previous.reset !== current.reset) {\n        return false;\n    }\n    if (current.type === 'next') {\n        return previous.value === current.value;\n    }\n    if (current.type === 'error') {\n        return previous.error === current.error;\n    }\n    return true;\n}\n\n/**\n * @ngModule LetModule\n *\n * @description\n *\n * The `*ngrxLet` directive serves a convenient way of binding observables to a view context\n * (DOM element's scope). It also helps with several internal processing under the hood.\n *\n * @usageNotes\n *\n * ### Displaying Observable Values\n *\n * ```html\n * <ng-container *ngrxLet=\"number$ as n\">\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n *\n * <ng-container *ngrxLet=\"number$; let n\">\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n * ```\n *\n * ### Tracking Different Observable Events\n *\n * ```html\n * <ng-container *ngrxLet=\"number$ as n; error as e; complete as c\">\n *   <app-number [number]=\"n\" *ngIf=\"!e && !c\">\n *   </app-number>\n *\n *   <p *ngIf=\"e\">There is an error: {{ e }}</p>\n *   <p *ngIf=\"c\">Observable is completed.</p>\n * </ng-container>\n * ```\n *\n * ### Combining Multiple Observables\n *\n * ```html\n * <ng-container *ngrxLet=\"{ users: users$, query: query$ } as vm\">\n *   <app-search-bar [query]=\"vm.query\"></app-search-bar>\n *   <app-user-list [users]=\"vm.users\"></app-user-list>\n * </ng-container>\n * ```\n *\n * ### Using Suspense Template\n *\n * ```html\n * <ng-container *ngrxLet=\"number$ as n; suspenseTpl: loading\">\n *   <app-number [number]=\"n\"></app-number>\n * </ng-container>\n *\n * <ng-template #loading>\n *   <p>Loading...</p>\n * </ng-template>\n * ```\n *\n * ### Using Aliases for Non-Observable Values\n *\n * ```html\n * <ng-container *ngrxLet=\"userForm.controls.email as email\">\n *   <input type=\"text\" [formControl]=\"email\" />\n *\n *   <ng-container *ngIf=\"email.errors && (email.touched || email.dirty)\">\n *     <p *ngIf=\"email.errors.required\">This field is required.</p>\n *     <p *ngIf=\"email.errors.email\">This field must be an email.</p>\n *   </ng-container>\n * </ng-container>\n * ```\n *\n * @publicApi\n */\nclass LetDirective {\n    constructor(mainTemplateRef, viewContainerRef, errorHandler, renderScheduler) {\n        this.mainTemplateRef = mainTemplateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.errorHandler = errorHandler;\n        this.renderScheduler = renderScheduler;\n        this.isMainViewCreated = false;\n        this.isSuspenseViewCreated = false;\n        this.viewContext = {\n            $implicit: undefined,\n            ngrxLet: undefined,\n            error: undefined,\n            complete: false,\n        };\n        this.renderEventManager = createRenderEventManager({\n            suspense: () => {\n                this.viewContext.$implicit = undefined;\n                this.viewContext.ngrxLet = undefined;\n                this.viewContext.error = undefined;\n                this.viewContext.complete = false;\n                this.renderSuspenseView();\n            },\n            next: (event) => {\n                this.viewContext.$implicit = event.value;\n                this.viewContext.ngrxLet = event.value;\n                if (event.reset) {\n                    this.viewContext.error = undefined;\n                    this.viewContext.complete = false;\n                }\n                this.renderMainView(event.synchronous);\n            },\n            error: (event) => {\n                this.viewContext.error = event.error;\n                if (event.reset) {\n                    this.viewContext.$implicit = undefined;\n                    this.viewContext.ngrxLet = undefined;\n                    this.viewContext.complete = false;\n                }\n                this.renderMainView(event.synchronous);\n                this.errorHandler.handleError(event.error);\n            },\n            complete: (event) => {\n                this.viewContext.complete = true;\n                if (event.reset) {\n                    this.viewContext.$implicit = undefined;\n                    this.viewContext.ngrxLet = undefined;\n                    this.viewContext.error = undefined;\n                }\n                this.renderMainView(event.synchronous);\n            },\n        });\n        this.subscription = new Subscription();\n    }\n    set ngrxLet(potentialObservable) {\n        this.renderEventManager.nextPotentialObservable(potentialObservable);\n    }\n    static ngTemplateContextGuard(dir, ctx) {\n        return true;\n    }\n    ngOnInit() {\n        this.subscription.add(this.renderEventManager.handlePotentialObservableChanges().subscribe());\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n    renderMainView(isSyncEvent) {\n        if (this.isSuspenseViewCreated) {\n            this.isSuspenseViewCreated = false;\n            this.viewContainerRef.clear();\n        }\n        if (!this.isMainViewCreated) {\n            this.isMainViewCreated = true;\n            this.viewContainerRef.createEmbeddedView(this.mainTemplateRef, this.viewContext);\n        }\n        if (!isSyncEvent) {\n            this.renderScheduler.schedule();\n        }\n    }\n    renderSuspenseView() {\n        if (this.isMainViewCreated) {\n            this.isMainViewCreated = false;\n            this.viewContainerRef.clear();\n        }\n        if (this.suspenseTemplateRef && !this.isSuspenseViewCreated) {\n            this.isSuspenseViewCreated = true;\n            this.viewContainerRef.createEmbeddedView(this.suspenseTemplateRef);\n        }\n    }\n}\n/** @nocollapse */ LetDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: LetDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i0.ErrorHandler }, { token: RenderScheduler }], target: i0.ÉµÉµFactoryTarget.Directive });\n/** @nocollapse */ LetDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: LetDirective, selector: \"[ngrxLet]\", inputs: { ngrxLet: \"ngrxLet\", suspenseTemplateRef: [\"ngrxLetSuspenseTpl\", \"suspenseTemplateRef\"] }, providers: [RenderScheduler], ngImport: i0 });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: LetDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngrxLet]',\n                    providers: [RenderScheduler],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i0.ErrorHandler }, { type: RenderScheduler }]; }, propDecorators: { ngrxLet: [{\n                type: Input\n            }], suspenseTemplateRef: [{\n                type: Input,\n                args: ['ngrxLetSuspenseTpl']\n            }] } });\n\nclass LetModule {\n}\n/** @nocollapse */ LetModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: LetModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\n/** @nocollapse */ LetModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: LetModule, declarations: [LetDirective], exports: [LetDirective] });\n/** @nocollapse */ LetModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: LetModule });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: LetModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [LetDirective],\n                    exports: [LetDirective],\n                }]\n        }] });\n\n/**\n * @ngModule PushModule\n *\n * @description\n *\n * The `ngrxPush` pipe serves as a drop-in replacement for the `async` pipe.\n * It contains intelligent handling of change detection to enable us\n * running in zone-full as well as zone-less mode without any changes to the code.\n *\n * @usageNotes\n *\n * ### Displaying Observable Values\n *\n * ```html\n * <p>{{ number$ | ngrxPush }}</p>\n *\n * <ng-container *ngIf=\"number$ | ngrxPush as n\">{{ n }}</ng-container>\n *\n * <app-number [number]=\"number$ | ngrxPush\"></app-number>\n * ```\n *\n * ### Combining Multiple Observables\n *\n * ```html\n * <code>\n *   {{ { users: users$, query: query$ } | ngrxPush | json }}\n * </code>\n * ```\n *\n * @publicApi\n */\nclass PushPipe {\n    constructor(errorHandler) {\n        this.errorHandler = errorHandler;\n        this.renderScheduler = createRenderScheduler();\n        this.renderEventManager = createRenderEventManager({\n            suspense: (event) => this.setRenderedValue(undefined, event.synchronous),\n            next: (event) => this.setRenderedValue(event.value, event.synchronous),\n            error: (event) => {\n                if (event.reset) {\n                    this.setRenderedValue(undefined, event.synchronous);\n                }\n                this.errorHandler.handleError(event.error);\n            },\n            complete: (event) => {\n                if (event.reset) {\n                    this.setRenderedValue(undefined, event.synchronous);\n                }\n            },\n        });\n        this.subscription = this.renderEventManager\n            .handlePotentialObservableChanges()\n            .subscribe();\n    }\n    transform(potentialObservable) {\n        this.renderEventManager.nextPotentialObservable(potentialObservable);\n        return this.renderedValue;\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n    setRenderedValue(value, isSyncEvent) {\n        if (value !== this.renderedValue) {\n            this.renderedValue = value;\n            if (!isSyncEvent) {\n                this.renderScheduler.schedule();\n            }\n        }\n    }\n}\n/** @nocollapse */ PushPipe.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: PushPipe, deps: [{ token: i0.ErrorHandler }], target: i0.ÉµÉµFactoryTarget.Pipe });\n/** @nocollapse */ PushPipe.Éµpipe = i0.ÉµÉµngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: PushPipe, name: \"ngrxPush\", pure: false });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: PushPipe, decorators: [{\n            type: Pipe,\n            args: [{ name: 'ngrxPush', pure: false }]\n        }], ctorParameters: function () { return [{ type: i0.ErrorHandler }]; } });\n\nclass PushModule {\n}\n/** @nocollapse */ PushModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: PushModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\n/** @nocollapse */ PushModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: PushModule, declarations: [PushPipe], exports: [PushPipe] });\n/** @nocollapse */ PushModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: PushModule });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: PushModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [PushPipe],\n                    exports: [PushPipe],\n                }]\n        }] });\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LetDirective, LetModule, PushModule, PushPipe, RenderScheduler };\n//# sourceMappingURL=ngrx-component.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}